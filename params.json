{
  "name": "PHP编码规范",
  "tagline": "",
  "body": "本文档描述了在php开发中应该遵守的规范，对代码风格的统一起到指导作用。\r\n\r\n目录文件及编码\r\n---------\r\n\r\n文件名需要遵守yii2框架的约定，controller和model需要使用驼峰式(camelize)的命名规则，而view文件需要使用下划线(underscore)的命名规则，如：\r\n\r\n```\r\n控制器：TestController.php PayOrderController.php\r\n模型: Test.php PayOrder.php\r\n视图：test.php pay_order.php\r\n```\r\n\r\n注意：yii的generator在生成view时会给每个控制器生成一个对应view的目录，目录的命令规则是中间线(dash)的方式，如 pay-order，如果需要为控制器使用单独的目录，请遵守此规则。\r\n\r\n文件的编码统一使用UTF-8编码\r\n\r\n目录名必须全部小写\r\n\r\n格式\r\n---\r\n\r\n###大括号\r\n\r\n- 大括号与if,else,for,do,while一起使用时，即使只有一条语句，也要加应该把大括号加上。\r\n- 左大括号与声明语句在同一行，即括号左边不需要换行，右边需要。\r\n- 右大括号需要单独占一行(使用函数表达式时除外)。\r\n\r\n如\r\n\r\n```\r\nif ($user->isLogin()){\r\n    $user->addScore($score);\r\n} else {\r\n    $this->error('用户');\r\n}\r\n```\r\n\r\n使用函数表达式的情况\r\n\r\n```\r\nusort($array, function($a, $b){\r\n\treturn $a - $b;\r\n});\r\n```\r\n\r\n###空白\r\n\r\n赋值、比较、逻辑、运算、字符串操作符的两端需要有空格\r\n\r\n```\r\n$user = Yii::$app->user;\r\nif ($user->score > 100){\r\n\t$user->score = $user->score - 100;\r\n}\r\n$str = $str . 'another string';\r\n```\r\n\r\n函数的参数之间需要有空格\r\n\r\n```\r\nfunction addScore($user, $type, $status){\r\n\t...\r\n}\r\n```\r\n\r\n类的方法和方法之间需要有空行\r\n\r\n```\r\nfunction func1(){\r\n    ... \r\n}\r\n\r\nfunction func2(){\r\n\t...\r\n}\r\n```\r\n\r\n###缩进\r\n\r\n统一使用4个空格，不要使用tab来缩进\r\n\r\n###数组\r\n\r\n数组使用[]来定义，不要使用array()的语法。  \r\n数组的定义如果超过80个字符，需要使用多行分隔，数组的最后一个元素后在也要添加逗号，这样在添加新元素的时候会比较方便。\r\n\r\n```\r\n$config = [\r\n\t'host' => 'localhost',\r\n\t'username' => 'mysql',\r\n\t'password' => 'mysql',\r\n];\r\n```\r\n\r\n命名规则\r\n-------\r\n\r\n- 接口和类的命名需要使用驼峰式，首字母大写，如 UserScore\r\n- 变量及函数的命名需要使用驼峰式，首字母小写，如 $userScore, getUserScore($user)\r\n- 常量的定义采用大写+下划线的方式，如 ORDER_STATUS\r\n- mysql的库名、表名、和字段名都需要使用全部小写+下划线的规则，以避免在不同系统下产生问题。\r\n\r\n编程实践\r\n-------\r\n\r\n###字符串\r\n\r\n字符串优先使用单引号，如果字符串里包含变量，可以使用双引号或使用sprintf来进行格式化，如\r\n\r\n```\r\n$str = 'this is a test';\r\n$str2 = sprintf('user name is %s, age is %d', $name, $age);\r\n$str3 = \"user name is $ice, age is $age\";\r\n```\r\n\r\n###函数\r\n\r\n单个函数的行数应该在100行以内，超过100行的要考虑拆分成多个函数，保持函数的功能尽量简单。\r\n\r\n###常量定义\r\n对于数据库表示状态或类别的定义，使用tinyint(1)来存储，并在Model中使用常量定义不同数字表示的含义，如表示订单状态的字段status可以表示如下：\r\n\r\n```\r\nconst STATUS_NOT_PAY = 0; //未支付\r\nconst STATUS_PENDING = 1; //待处理\r\nconst STATUS_DONE = 2; //已完成\r\nconst STATUS_CANCEL = 3; //已取消\r\n```\r\n\r\n在代码中尽量避免直接使用常量来判断状态，而是提供对应的方法，如\r\n```\r\nclass Order{\r\n\tpublic function isPending(){\r\n\t\treturn $this->status == self::STATUS_PENDING;\r\n\t}\r\n}\r\n...\r\n$order = Order::findOne($id);\r\nif ($order->isPending()){\r\n\t...\r\n}\r\n```\r\n\r\n常量的定义是为了使数字具有更明确的含义，而使用方法既可以使代码的可读性更好，也对外面隐藏了常量及判断的逻辑细节，这样即使判断的逻辑需要调整，也只需要改对应的函数。\r\n\r\n###时间字段\r\n\r\n对于mysql，日期和时间有对应的数据类型date和datetime，使用date和datetime类型时，我们需要存储格式化之后的日期，即2016-12-20这样的字符串，并可以对该字段进行比较查询，输出的时候也无须做任何转换。使用date类型在程序中比较时间时需要做一次转换，在判断空日期的时候也需要使用\r\n```\r\nif ($date == '0000-00-00'){\r\n\t...\r\n}\r\n```\r\n这样的代码才能完成。\r\n\r\n另外就是使用int(11)来保存unix timestamp，在程序中判断时由于是数字，可以直接比较，代码会显示更直观和整洁\r\n```\r\nif ($date > 0){\r\n\t...\r\n}\r\n```\r\n但是用户在创建数据时一般会使用日期控件来输入，这时需要将输入日期转换成unix timestamp才能入库，通常有2种做法\r\n\r\n使用Model rules的filterValidator来处理，在Model中增加新的rule\r\n```\r\n[['date', 'filter', function($value){\r\n\treturn strtotime($value);\t\r\n}]]\r\n```\r\n\r\n在Model的beforeSave方法里处理\r\n\r\n```\r\npublic function beforeSave($insert)\r\n{\r\n    if (parent::beforeSave($insert)) {\r\n    \t$this->date = strtotime($this->date);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n至于哪种方案更好一些，我认为要看使用的场景，如果只是做为一种显示需要，使用mysql的date类型则更简单，如果需要对该字段进行很复杂的条件判断，我更倾向于unix timestamp。\r\n\r\n###使用策略模式代替过多的if和else\r\n\r\n当代码逻辑中出现很多个if elseif的判断，就要考虑这个问题了，比如：\r\n\r\n```\r\nif ($order->status == 1){\r\n\t...\r\n} elseif ($order->status == 2){\r\n\t...\r\n} elseif ($order->status == 3){\r\n\t...\r\n} elseif ($order->status == 3){\r\n\t...\r\n}\r\n```\r\n\r\n上面的逻辑可能是想根据订单的不同状态有不同的处理逻辑，如果状态很多就会让代码变得非常难看，这种情况下通常可以使用策略模式解决这个问题。\r\n\r\n```\r\npublic $processors = [ \r\n\tself::STATUS_PENDING => 'Pending',\r\n\tself::STATUS_DONE => 'Done',\r\n\tself::STATUS_CANCEL => 'Cancel'\r\n];\r\n\r\npublic function process(){\r\n\t$processor = 'process' . $this->processors[$this->status];\r\n\treturn $this->$processor();\r\n}\r\n\r\npublic function processPending(){\r\n\t...\r\n}\r\n\r\npublic function processDone(){\r\n    ...\r\n}\r\n\r\npublic function processCancel(){\r\n    ...\t\r\n}\r\n```\r\n\r\n由于php的动态语言特性，我们不需要反射机制也可以动态的调用方法。\r\n\r\n###参数验证\r\n\r\n有的时候我们需要对很多参数进行验证，或对同一参数多次验证，这时候如果写的不好，也很能写成这样\r\n\r\n```\r\nif (Util::isEmail($_GET['email'])){\r\n\treturn $this->error('email is error');\r\n} elseif ($_GET['username'] == ''){\r\n\treturn $this->error('username is empty');\r\n} elseif ($_GET['password'] == ''){\r\n\treturn $this->error('password is empty');\r\n}\r\n....\r\n```\r\n这时我们又陷入了大量if else的困局。想一下，能不能事先把规则和消息配置好，再统一循环验证？，其实这就是Yii框架数据验证的方式，Yii框架本身提供了大量的Validator，配合Model可以让验证变得非常容易\r\n\r\n```\r\nclass UserForm extends Model{\r\n\r\n\tpublic function rules(){\r\n\t    return [\r\n\t        [['username', 'password'], 'required', 'message' => '用户名密码不能为空'], //不能为空\r\n\t        [['email'], 'email', 'message' => '邮箱格式不正确'], //email格式\r\n\t        [['age'], 'integer', 'min' => 0], //年龄必须是整数，不能是负数\r\n\t    ];\r\n\t}\r\n}\r\n```\r\n\r\n使用定义好的验证逻辑\r\n\r\n```\r\n$form = new UserForm();\r\n$form->load($_POST);\r\nif(!$form->validate()){\r\n\t$errors = $form->errors;\r\n\t...\r\n}\r\n```\r\n\r\n###避免代码嵌套层次过多\r\n\r\n代码层次如果太深，会影响我们正常阅读，同时也会让逻辑变得非常混乱。  \r\n在函数的章节时，我们建议应该让函数的代码尽量控制在100行以内，这也有助于减少代码的层次。  \r\n通常函数内的代码嵌套不应该超过3层，比如下面这样是非常糟糕的风格：\r\n\r\n```\r\nif($a == 1){\r\n\tif($b == 2){\r\n\t\tforeach($users as $user){\r\n\t\t\tif($user->id > 10){\r\n\t\t\t\tif($user->age < 20){\r\n\t\t\t\t\t...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n该如何避免呢？有三条建议你可以考虑：\r\n\r\n1. 合并条件，看看能否将多个判断条件合并成一条\r\n2. 将否定条件写在前面，条件不符合就直接返回\r\n3. 在循环中使用continue和break来先处理否定条件\r\n\r\n如上面的代码可以改写成：\r\n\r\n```\r\nif($a != 1){\r\n\treturn false;\r\n}\r\nif($b != 2){\r\n\treturn false;\r\n}\r\nforeach($users as $user){\r\n\tif($user->id <= 10 || $user->age >= 20){\r\n\t\tcontinue;\r\n\t}\r\n\t...\r\n}\r\n```\r\n\r\n###精简代码\r\n\r\n使用三元操作符来代替if else，如\r\n\r\n```\r\nif($user->isLogin()){\r\n\t$score = 10;\r\n}else{\r\n\t$score = 20;\r\n}\r\n```\r\n\r\n可以写成\r\n\r\n```\r\n$score = $user->isLogin() ? 10 : 20;\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}